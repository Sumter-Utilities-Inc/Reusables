name: Reusable – Dev Branch Docker Build (secure, publish-before-docker)

on:
  workflow_call:
    inputs:
      dotnet_version:
        description: ".NET SDK version"
        required: false
        type: string
        default: "9.0.x"

permissions:
  contents: read
  packages: write

jobs:
  init_workflow:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    outputs:
      containers: ${{ steps.get-containers.outputs.matrix }}
      repo_owner_lower: ${{ steps.split.outputs._0 }}
      ghpk_key: ${{ steps.detect-ghpk.outputs.GHPK_KEY }}
    steps:
      - uses: actions/checkout@v4

      - id: get-containers
        run: 'echo "matrix={\"container\": $(jq -c . ./src/strategy_matrix_containers.json)}" >> "$GITHUB_OUTPUT"'

      - id: owner_repo
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - uses: winterjung/split@v2
        id: split
        with:
          msg: ${{ steps.owner_repo.outputs.lowercase }}
          separator: "/"

      - id: detect-ghpk
        name: Detect GitHub Packages NuGet source key
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y xmlstarlet
          KEY=$(xmlstarlet sel -t -m '//packageSources/add[contains(@value,"nuget.pkg.github.com")]' -v @key -n NuGet.config | head -n1)
          if [[ -z "$KEY" ]]; then
            echo "::error::No GitHub Packages source found in NuGet.config"
            exit 1
          fi
          echo "GHPK_KEY=$KEY" >> "$GITHUB_OUTPUT"

      - name: Set repo owner in NuGet.config
        run: |
          OWNER="${{ github.repository_owner }}"
          sed -i "s|__REPO_OWNER__|$OWNER|g" NuGet.config

  build_publish:
    needs: init_workflow
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: development

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          cache: true
          cache-dependency-path: |
            **/packages.lock.json
            **/*.csproj

      - name: Configure credentials for GitHub Packages source
        env:
          NUGET_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          dotnet nuget update source "${{ needs.init_workflow.outputs.ghpk_key }}" \
            --username "$GITHUB_ACTOR" \
            --password "$NUGET_TOKEN"

      - name: Publish container apps (Debug)
        run: |
          set -euo pipefail
          mapfile -t APPS < <(jq -r '.[]' ./src/strategy_matrix_containers.json)
          for app in "${APPS[@]}"; do
            proj="src/${app}/${app}.csproj"
            out="src/${app}/publish"
            echo "Publishing $proj → $out"
            dotnet restore "$proj"
            dotnet publish "$proj" -c Debug -o "$out" --no-restore
          done

  docker:
    if: ${{ !contains(toJson(needs.init_workflow.outputs.containers), '[]') }}
    needs: [init_workflow, build_publish]
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJson(needs.init_workflow.outputs.containers) }}
    permissions:
      contents: read
      packages: write
    env:
      base_image: "${{ vars.DOCKER_IMAGE_PKGS }}/${{ needs.init_workflow.outputs.repo_owner_lower }}/"
    steps:
      - id: container_name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ matrix.container }}

      - uses: actions/checkout@v4
        with:
          ref: development

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_IMAGE_PKGS }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag substitution
        run: |
          set -euo pipefail
          cd src
          sed -i "s/xxVERSIONxx/:dev/g" docker-compose-cicd.yml

      - name: Build & push dev image (runtime-only Dockerfiles)
        shell: bash
        run: |
          set -euo pipefail
          cd src
          docker compose -f docker-compose-cicd.yml build ${{ steps.container_name.outputs.lowercase }}
          docker push ${{ env.base_image }}${{ steps.container_name.outputs.lowercase }}:dev
