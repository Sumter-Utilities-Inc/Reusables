name: Reusable – Main Branch Release Pipeline (.NET + Docker, secure NuGet config)

on:
  workflow_call:
    inputs:
      dotnet_version:
        description: ".NET SDK version"
        required: false
        type: string
        default: "9.0.x"
      nuget_publish_target:
        description: "NuGet publish target: 'nuget.org' or 'github'"
        required: true
        type: string
    secrets:
      NUGET_PACKAGES_AUTH_TOKEN:
        required: true

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  init_workflow:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    outputs:
      nuget_packages: ${{ steps.nuget_matrix.outputs.matrix }}
      containers: ${{ steps.container_matrix.outputs.matrix }}
      repo_owner_lower: ${{ steps.split.outputs._0 }}
      repo_name: ${{ steps.split.outputs._1 }}
      version: ${{ steps.semver.outputs.next }}
      version_no_v: ${{ steps.version.outputs.substring }}
      ghpk_key: ${{ steps.detect-ghpk.outputs.GHPK_KEY }}
    steps:
      - uses: actions/checkout@v4

      - id: container_matrix
        name: Load container matrix
        run: 'echo "matrix={\"container\": $(jq -c . ./src/strategy_matrix_containers.json)}" >> "$GITHUB_OUTPUT"'

      - id: nuget_matrix
        name: Load NuGet package matrix
        run: 'echo "matrix={\"nuget_package\": $(jq -c . ./src/strategy_matrix_nuget_packages.json)}" >> "$GITHUB_OUTPUT"'

      - id: owner_repo
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - uses: winterjung/split@v2
        id: split
        with:
          msg: ${{ steps.owner_repo.outputs.lowercase }}
          separator: "/"

      - name: Get next version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          minorList: feat
          patchList: fix, docs, style, refactor, perf, test, build, ci, chore

      - uses: bhowell2/github-substring-action@v1.0.0
        id: version
        name: Extract numeric version (drop 'v')
        with:
          value: ${{ steps.semver.outputs.next }}
          index_of_str: "v"

      - id: detect-ghpk
        name: Detect GitHub Packages NuGet source key
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y xmlstarlet   # previously installed in multiple jobs:contentReference[oaicite:2]{index=2}
          KEY=$(xmlstarlet sel -t -m '//packageSources/add[contains(@value,"nuget.pkg.github.com")]' -v @key -n NuGet.config | head -n1)
          if [[ -z "$KEY" ]]; then
            echo "::error::No GitHub Packages source found in NuGet.config"
            exit 1
          fi
          echo "GHPK_KEY=$KEY" >> "$GITHUB_OUTPUT"

      - name: Set repo owner in NuGet.config
        run: |
          OWNER="${{ github.repository_owner }}"
          sed -i "s|__REPO_OWNER__|$OWNER|g" NuGet.config

  build_publish:
    needs: init_workflow
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          cache: true
          cache-dependency-path: |
            **/packages.lock.json
            **/*.csproj

      - name: Configure credentials for GitHub Packages source
        shell: bash
        env:
          NUGET_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          dotnet nuget update source "${{ needs.init_workflow.outputs.ghpk_key }}" \
            --username "$GITHUB_ACTOR" \
            --password "$NUGET_TOKEN"

      - name: Publish container apps (Release)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t APPS < <(jq -r '.[]' ./src/strategy_matrix_containers.json)
          for app in "${APPS[@]}"; do
            proj="src/${app}/${app}.csproj"
            out="src/${app}/publish"
            echo "Publishing $proj → $out"
            dotnet restore "$proj"
            dotnet publish "$proj" -c Release -o "$out" --no-restore
          done

  release:
    name: "release (${{ needs.init_workflow.outputs.version }})"
    runs-on: ubuntu-24.04
    needs: [init_workflow, build_publish]
    permissions:
      contents: write
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Create version tag
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com
          git tag ${{ needs.init_workflow.outputs.version }}
          git push origin ${{ needs.init_workflow.outputs.version }}

      - uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.init_workflow.outputs.version }}
          includeInvalidCommits: true

      - uses: ncipollo/release-action@v1
        with:
          name: "Release ${{ needs.init_workflow.outputs.version }}"
          tag: ${{ needs.init_workflow.outputs.version }}
          bodyFile: "CHANGELOG.md"

  docker:
    if: ${{ !contains(toJson(needs.init_workflow.outputs.containers), '[]') }}
    runs-on: ubuntu-24.04
    needs: [init_workflow, build_publish, release]
    timeout-minutes: 45
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJson(needs.init_workflow.outputs.containers) }}
    permissions:
      contents: read
      packages: write
    env:
      base_image: "${{ vars.DOCKER_IMAGE_PKGS }}/${{ needs.init_workflow.outputs.repo_owner_lower }}/"
    steps:
      - id: container_name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ matrix.container }}

      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_IMAGE_PKGS }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Replace image tag in compose
        shell: bash
        run: |
          set -euo pipefail
          cd src
          sed -i "s/xxVERSIONxx/:${{ needs.init_workflow.outputs.version }}/g" docker-compose-cicd.yml   # replaces rpl usage:contentReference[oaicite:4]{index=4}

      - name: Build & push runtime-only image
        shell: bash
        run: |
          set -euo pipefail
          cd src
          docker compose -f docker-compose-cicd.yml build ${{ steps.container_name.outputs.lowercase }}
          docker compose -f docker-compose-cicd.yml push  ${{ steps.container_name.outputs.lowercase }}
          docker tag  ${{ env.base_image }}${{ steps.container_name.outputs.lowercase }}:${{ needs.init_workflow.outputs.version }} \
                      ${{ env.base_image }}${{ steps.container_name.outputs.lowercase }}
          docker push ${{ env.base_image }}${{ steps.container_name.outputs.lowercase }}

  nuget:
    if: ${{ !contains(toJson(needs.init_workflow.outputs.nuget_packages), '[]') }}
    name: "nuget ${{ matrix.nuget_package }}:(${{ needs.init_workflow.outputs.version }})"
    needs: [init_workflow, build_publish, release]
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.init_workflow.outputs.nuget_packages) }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: |
            **/packages.lock.json
            **/*.csproj

      - name: Configure credentials for GitHub Packages source
        shell: bash
        env:
          NUGET_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          dotnet nuget update source "${{ needs.init_workflow.outputs.ghpk_key }}" \
            --username "$GITHUB_ACTOR" \
            --password "$NUGET_TOKEN"

      - name: Restore
        working-directory: src/${{ matrix.nuget_package }}
        run: dotnet restore ${{ matrix.nuget_package }}.csproj

      - name: Build
        working-directory: src/${{ matrix.nuget_package }}
        run: dotnet build ${{ matrix.nuget_package }}.csproj --configuration Release

      - name: Prepare artifacts
        run: mkdir -p "$GITHUB_WORKSPACE/artifacts/${{ matrix.nuget_package }}"

      - name: Pack
        working-directory: src/${{ matrix.nuget_package }}
        run: dotnet pack ${{ matrix.nuget_package }}.csproj --configuration Release --no-build --output "$GITHUB_WORKSPACE/artifacts/${{ matrix.nuget_package }}" -p:PackageVersion=${{ needs.init_workflow.outputs.version_no_v }}

      - name: Push package
        run: |
          if [ "${{ inputs.nuget_publish_target }}" = "nuget.org" ]; then
            SOURCE="https://api.nuget.org/v3/index.json"
          else
            SOURCE="${{ needs.init_workflow.outputs.ghpk_key }}"
          fi

          dotnet nuget push "$GITHUB_WORKSPACE/artifacts/${{ matrix.nuget_package }}/${{ matrix.nuget_package }}.${{ needs.init_workflow.outputs.version_no_v }}.nupkg" \
            --api-key ${{ secrets.NUGET_PACKAGES_AUTH_TOKEN }} \
            --source "$SOURCE"
